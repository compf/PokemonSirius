apply plugin: 'application'

[compileJava]*.options*.encoding = 'UTF-8'
eclipse.project.name = appName + '-prototype'
sourceCompatibility="$javaVersion"
mainClassName = 'compf.prototype.SinglePlayerAgainstBotProtytype'


dependencies {
	// https://mvnrepository.com/artifact/org.xerial/sqlite-jdbc
	implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
	implementation 'org.apache.logging.log4j:log4j-api:2.19.0'
	implementation project (":core")
// https://mvnrepository.com/artifact/com.google.code.gson/gson
implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'

  implementation 'org.apache.logging.log4j:log4j-core:2.19.0'
}
jar {
// sets the name of the .jar file this produces to the name of the game or app.
	archiveBaseName.set(appName)
// the duplicatesStrategy matters starting in Gradle 7.0; this setting works.
	duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
	dependsOn configurations.runtimeClasspath
	from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
// these "exclude" lines remove some unnecessary duplicate files in the output JAR.
	exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
	dependencies {
		exclude('META-INF/INDEX.LIST', 'META-INF/maven/**')
	}
// setting the manifest makes the JAR runnable.
	manifest {
		attributes 'Main-Class': project.mainClassName
	}
// this last step may help on some OSes that need extra instruction to make runnable JARs.
	doLast {
		file(archiveFile).setExecutable(true, false)
	}
}
	run {
    standardInput = System.in
}